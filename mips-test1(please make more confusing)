.data
.LC1: 																																																.asciiz "Enter 1, 2, or 3, for R/P/S: \n"
.LC6:
																																																																																						.asciiz "You lost 3 times. Computer wins! \n"	
																																																						.BEE1: .asciiz "          __         .' '. \n"
																																																		.BEE2: .asciiz "        _/__)        .   .       . \n"
																																										.BEE3: .asciiz "       (8|)_}}- .      .        . \n"
																																																							.BEE4: .asciiz "        `\__)    '. . ' ' .  . ' \n"

.LC2:
																																																																			.asciiz "The computer chose paper. You lose \n"
	.LC0:
																																																	.asciiz "Playing 3 rounds:\n"
																.LC3:
																																																									.asciiz "The computer chose scissors. You lose \n"
	
																							.LC4:
																																				.asciiz "The computer chose rock. You lose. \n"
	
								.LC5:
																																														.asciiz "Invalid number. You forfeit this round by default. \n"
	

	
.text


main:
la	$a0,	.LC0 
	li	$v0,	4  	  
syscall

la	$a0,	.BEE1 
	li	$v0,	4  	  
syscall
la	$a0,	.BEE2 
	li	$v0,	4  	  
syscall
la	$a0,	.BEE3 
	li	$v0,	4  	  
syscall

li $a1, 																																					3  #$a1 : upper lim of rand int
la	$a0,	.BEE4 
	li	$v0,	4  	  
syscall
li	$v0, 42  
																																											li $s0, 0
syscall

loopRound:
	jal playRound
add $s0, $s0,	1
	beq	 $s0,	 3, end
j 	loopRound

end:

	la 	$a0, .LC6
li $v0, 	4
	syscall


li $v0, 			10	
syscall

#brandon start here-ish?
#ive been tabbing random things way over to the right
#adding visual/code clutter
#added RNG lines

playRound:
la $a0, .LC1 
li $v0, 4  	   
syscall

li $v0, 5	   
syscall
move $t0, $v0

li $a1, 1
beq $t0, $a1, cond1
add $a1, $a1, 1

beq $t0, $a1, cond2
add $a1, $a1, 1	

beq $t0, $a1, cond3
add $a1, $a1, 1	

beq $t0, $a1, cond4
add $a1, $a1, 1

returnTest:
jr $ra


cond1:
la $a0, .LC2
li $v0, 4
syscall
j returnTest

cond2:
la $a0, .LC3
li $v0, 4
syscall
j returnTest

cond3:
la $a0, .LC4
li $v0, 4
syscall
j returnTest

cond4:
la $a0, .LC5
li $v0, 4
syscall
j returnTest
